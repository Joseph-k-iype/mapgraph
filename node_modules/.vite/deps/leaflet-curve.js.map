{
  "version": 3,
  "sources": ["../../leaflet-curve/leaflet.curve.js"],
  "sourcesContent": ["/*\r\n * Leaflet.curve v0.1.0 - a plugin for Leaflet mapping library. https://github.com/elfalem/Leaflet.curve\r\n * (c) elfalem 2015\r\n */\r\n/*\r\n * note that SVG (x, y) corresponds to (long, lat)\r\n */\r\n\r\nL.Curve = L.Path.extend({\r\n\toptions: {\r\n\t},\r\n\t\r\n\tinitialize: function(path, options){\r\n\t\tL.setOptions(this, options);\r\n\t\tthis._setPath(path);\r\n\t},\r\n\t\r\n\tgetPath: function(){\r\n\t\treturn this._coords;\r\n\t},\r\n\t\r\n\tsetPath: function(path){\r\n\t\tthis._setPath(path);\r\n\t\treturn this.redraw();\r\n\t},\r\n\t\r\n\tgetBounds: function() {\r\n\t\treturn this._bounds;\r\n\t},\r\n\r\n\t_setPath: function(path){\r\n\t\tthis._coords = path;\r\n\t\tthis._bounds = this._computeBounds();\r\n\t},\r\n\t\r\n\t_computeBounds: function(){\r\n\t\tvar bound = new L.LatLngBounds();\r\n\t\tvar lastPoint;\r\n\t\tvar lastCommand;\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tlastCommand = coord;\r\n\t\t\t}else if(lastCommand == 'H'){\r\n\t\t\t\tbound.extend([lastPoint.lat,coord[0]]);\r\n\t\t\t\tlastPoint = new L.latLng(lastPoint.lat,coord[0]);\r\n\t\t\t}else if(lastCommand == 'V'){\r\n\t\t\t\tbound.extend([coord[0], lastPoint.lng]);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], lastPoint.lng);\r\n\t\t\t}else if(lastCommand == 'C'){\r\n\t\t\t\tvar controlPoint1 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'S'){\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint1 = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint2){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint2.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint2.lng;\r\n\t\t\t\t\tcontrolPoint1 = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'Q'){\r\n\t\t\t\tvar controlPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'T'){\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint.lng;\r\n\t\t\t\t\tcontrolPoint = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else{\r\n\t\t\t\tbound.extend(coord);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bound;\r\n\t},\r\n\t\r\n\t//TODO: use a centroid algorithm instead\r\n\tgetCenter: function () {\r\n\t\treturn this._bounds.getCenter();\r\n\t},\r\n\t\r\n\t_update: function(){\r\n\t\tif (!this._map) { return; }\r\n\t\t\r\n\t\tthis._updatePath();\r\n\t},\r\n\t\r\n\t_updatePath: function() {\r\n\t\tthis._renderer._updatecurve(this);\r\n\t},\r\n\r\n\t_project: function() {\r\n\t\tvar coord, lastCoord, curCommand, curPoint;\r\n\r\n\t\tthis._points = [];\r\n\t\t\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tthis._points.push(coord);\r\n\t\t\t\tcurCommand = coord;\r\n\t\t\t}else {\r\n\t\t\t\tswitch(coord.length){\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint(coord);\r\n\t\t\t\t\t\tlastCoord = coord;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif(curCommand == 'H'){\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([lastCoord[0], coord[0]]);\r\n\t\t\t\t\t\t\tlastCoord = [lastCoord[0], coord[0]];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([coord[0], lastCoord[1]]);\r\n\t\t\t\t\t\t\tlastCoord = [coord[0], lastCoord[1]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._points.push(curPoint);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n});\r\n\r\nL.curve = function (path, options){\r\n\treturn new L.Curve(path, options);\r\n};\r\n\r\nL.SVG.include({\r\n\t_updatecurve: function(layer){\r\n\t\tthis._setPath(layer, this._curvePointsToPath(layer._points));\r\n    \t},\r\n \t_curvePointsToPath: function(points){\r\n\t\tvar point, curCommand, str = '';\r\n\t\tfor(var i = 0; i < points.length; i++){\r\n\t\t\tpoint = points[i];\r\n\t\t\tif(typeof point == 'string' || point instanceof String){\r\n\t\t\t\tcurCommand = point;\r\n\t\t\t\tstr += curCommand;\r\n\t\t\t}else{\r\n\t\t\t\tswitch(curCommand){\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tstr += point.x + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\tstr += point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr += point.x + ',' + point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str || 'M0 0';\r\n\t}\r\n});\r\n"],
  "mappings": "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",
  "names": ["import_dist", "coord"]
}
